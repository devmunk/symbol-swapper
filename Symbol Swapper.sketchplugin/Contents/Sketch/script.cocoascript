@import "MochaJSDelegate.js";

// Plugin variables
var pluginName = "Symbol Swapper",
	pluginIdentifier = "com.sonburn.sketchplugins.symbol-swapper",
	debugMode = false;

// Function variables
var librarySort = NSSortDescriptor.sortDescriptorWithKey_ascending("name",1),
	libraries = AppController.sharedInstance().librariesController().libraries().sortedArrayUsingDescriptors([librarySort]),
	libraryLoop = libraries.objectEnumerator(),
	library,
	libraryNames = ["Current Document"],
	librarySymbols,
	librarySelects = [],
	symbolArray;

while (library = libraryLoop.nextObject()) {
	libraryNames.push(String(library.name()));
}

var swapSelected = function(context) {
	var predicate = NSPredicate.predicateWithFormat("className == %@ || className == %@","MSSymbolMaster","MSSymbolInstance"),
		selection = context.selection.filteredArrayUsingPredicate(predicate);

	if (selection.length) {
		var librarySettings = getLibrary(context);

		if (librarySettings) {
			var selectedLibrary = (librarySettings.selectedLibrary != 0) ? libraries[librarySettings.selectedLibrary - 1] : 0,
				selectedMaster = librarySettings.selectedMaster,
				selectionLoop = selection.objectEnumerator(),
				selection,
				instanceMap = {},
				count = 0;

			while (selection = selectionLoop.nextObject()) {
				var proceed = false;

				if (selectedMaster) {
					if (selectedLibrary != 0) {
						symbolMaster = importForeignSymbol(selectedMaster,selectedLibrary).symbolMaster();
					} else {
						symbolMaster = selectedMaster;
					}

					instanceMap[selection.symbolID().toString()] = symbolMaster.symbolID().toString();

					proceed = true;
				} else {
					var symbolName = (selection.class() == "MSSymbolMaster") ? selection.name() : selection.symbolMaster().name();

					if (symbolArray.containsObject(symbolName)) {
						var symbolIndex = symbolArray.indexOfObject(symbolName);

						if (selectedLibrary != 0) {
							symbolMaster = importForeignSymbol(librarySymbols[symbolIndex],selectedLibrary).symbolMaster();
						} else {
							symbolMaster = librarySymbols[symbolIndex];
						}

						instanceMap[selection.symbolID().toString()] = symbolMaster.symbolID().toString();

						proceed = true;
					}
				}

				if (proceed) {
					if (selection.class() == "MSSymbolMaster") {
						var instances = selection.allInstances();

						for (var i = 0; i < instances.length; i++) {
							instances[i].changeInstanceToSymbol(symbolMaster);

							if (librarySettings.renameInstances == 1) {
								instances[i].setName(symbolMaster.name());
							}

							count++;
						}

						if (librarySettings.deleteMasters == 1) {
							selection.removeFromParent();
						}
					} else {
						selection.changeInstanceToSymbol(symbolMaster);

						if (librarySettings.renameInstances == 1) {
							selection.setName(symbolMaster.name());
						}

						count++;
					}
				}
			}

			if (librarySettings.includeSiblings == 1 && Object.keys(instanceMap).length > 0) {
				var allInstances = getInstances(context);

				for (var i = 0; i < allInstances.length; i++) {
					if (!MSLayerPaster.updateOverridesOnInstance_withIDMap_) {
						allInstances[i].updateOverridesWithObjectIDMap(instanceMap);
					} else {
						MSLayerPaster.updateOverridesOnInstance_withIDMap_(allInstances[i],instanceMap);
					}
				}
			}

			context.document.reloadInspector();

			var libraryName = (selectedLibrary == 0) ? "current document" : selectedLibrary.name() + " library";

			context.document.showMessage(count + " symbol instance(s) have been swapped to the " + libraryName);
		}
	} else {
		displayDialog("Please select at least one symbol master or instance.",pluginName);
	}
}

var swapLibrary = function(context) {
	var foreignSymbolLibraries = NSMutableArray.array(),
		foreignSymbols = context.document.documentData().foreignSymbols(),
		foreignSymbolLoop = foreignSymbols.objectEnumerator(),
		foreignSymbol;

	while (foreignSymbol = foreignSymbolLoop.nextObject()) {
		var foreignObject = {};

		foreignObject.name = String(foreignSymbol.sourceLibraryName());
		foreignObject.id = String(foreignSymbol.libraryID());

		if (!foreignSymbolLibraries.containsObject(foreignObject)) {
			foreignSymbolLibraries.addObject(foreignObject);
		}
	}

	var foreignSymbolLibrarySort = NSSortDescriptor.sortDescriptorWithKey_ascending("name",1),
		foreignSymbolLibraries = foreignSymbolLibraries.sortedArrayUsingDescriptors([foreignSymbolLibrarySort]),
		foreignSymbolLibraryLoop = foreignSymbolLibraries.objectEnumerator(),
		foreignSymbolLibrary;

	var alertWindow = newAlertWindow(context,"Symbol Swap Libraries","Swap all symbols from one library to another.");

	var introText = createBoldLabel("This document contains " + foreignSymbols.count() + " imported symbols, from " + foreignSymbolLibraries.count() + " libraries.",12,NSMakeRect(0,0,300,32));
	alertWindow.addAccessoryView(introText);

	alertWindow.addAccessoryView(createDivider(NSMakeRect(0,0,300,1)));

	while (foreignSymbolLibrary = foreignSymbolLibraryLoop.nextObject()) {
		var foreignSymbolLoop = foreignSymbols.objectEnumerator(),
			foreignSymbol,
			thisLibraryName = foreignSymbolLibrary.name,
			thisLibraryID = foreignSymbolLibrary.id,
			thisLibraryCount = 0;

		while (foreignSymbol = foreignSymbolLoop.nextObject()) {
			var foreignLibraryName = String(foreignSymbol.sourceLibraryName()),
				foreignLibraryID = String(foreignSymbol.libraryID());

			if (foreignLibraryName == thisLibraryName && foreignLibraryID == thisLibraryID) {
				thisLibraryCount++;
			}
		}

		var libraryTitleText = createBoldLabel(thisLibraryName,12,NSMakeRect(0,0,300,16));
		alertWindow.addAccessoryView(libraryTitleText);

		var libraryCountText = createLabel("Symbol Count: " + thisLibraryCount,10,NSMakeRect(0,0,300,12));
		alertWindow.addAccessoryView(libraryCountText);

		var libraryIDText = createLabel("Library ID: " + thisLibraryID,10,NSMakeRect(0,0,300,12));
		alertWindow.addAccessoryView(libraryIDText);

		var librarySelect = createLibrarySelect(alertWindow);
		alertWindow.addAccessoryView(librarySelect);

		librarySelects.push(librarySelect);

		alertWindow.addAccessoryView(createDivider(NSMakeRect(0,0,300,1)));
	}

	alertWindow.addButtonWithTitle("Swap");
	alertWindow.addButtonWithTitle("Cancel");

	alertWindow.buttons().objectAtIndex(0).setEnabled(0);

	var responseCode = alertWindow.runModal();

	if (responseCode == 1000) {
		var changedSymbolCount = 0,
			ignoredSymbolCount = 0;

		for (i = 0; i < librarySelects.length; i++) {
			if (librarySelects[i].indexOfSelectedItem() != 0) {
				var currentLibraryName = foreignSymbolLibraries[i].name,
					currentLibraryID = foreignSymbolLibraries[i].id,
					newLibraryName = libraries[librarySelects[i].indexOfSelectedItem() - 1].name(), // Shifted to account for "Swap to…"
					newLibraryID = libraries[librarySelects[i].indexOfSelectedItem() - 1].libraryID(); // Shifted to account for "Swap to…"

				var foreignSymbolLoop = foreignSymbols.objectEnumerator(),
					foreignSymbol;

				while (foreignSymbol = foreignSymbolLoop.nextObject()) {
					var foreignLibraryName = String(foreignSymbol.sourceLibraryName()),
						foreignLibraryID = String(foreignSymbol.libraryID());

					if (foreignLibraryName == currentLibraryName && foreignLibraryID == currentLibraryID) {
						var libraryIndex;

						for (j = 0; j < libraries.length; j++) {
							if (String(libraries[j].name()) == newLibraryName && String(libraries[j].libraryID()) == newLibraryID) {
								libraryIndex = j;
							}
						}

						if (foreignSymbol.masterFromLibrary(libraries.objectAtIndex(libraryIndex))) {
							foreignSymbol.setLibraryID(newLibraryID);
							foreignSymbol.setSourceLibraryName(newLibraryName);

							changedSymbolCount++;
						} else {
							ignoredSymbolCount++;
						}
					}
				}
			}
		}

		context.document.showMessage(changedSymbolCount + " symbols have been swapped to new libraries, " + ignoredSymbolCount + " symbols were ignored as they weren't found in the new library");

		if (!debugMode) googleAnalytics(context,"swap","library");
	} else return false;
}

var report = function(context) {
	openUrl("https://github.com/sonburn/symbol-swapper/issues/new");

	if (!debugMode) googleAnalytics(context,"report","report");
}

var plugins = function(context) {
	openUrl("https://sonburn.github.io/");

	if (!debugMode) googleAnalytics(context,"plugins","plugins");
}

var donate = function(context) {
	openUrl("https://www.paypal.me/sonburn");

	if (!debugMode) googleAnalytics(context,"donate","donate");
}

function createBoldLabel(text,size,frame) {
	var label = NSTextField.alloc().initWithFrame(frame);

	label.setStringValue(text);
	label.setFont(NSFont.boldSystemFontOfSize(size));
	label.setBezeled(false);
	label.setDrawsBackground(false);
	label.setEditable(false);
	label.setSelectable(false);

	return label;
}

function createCheckbox(item,flag,frame) {
	var checkbox = NSButton.alloc().initWithFrame(frame),
		flag = (flag == false) ? NSOffState : NSOnState;

	checkbox.setButtonType(NSSwitchButton);
	checkbox.setBezelStyle(0);
	checkbox.setTitle(item.name);
	checkbox.setTag(item.value);
	checkbox.setState(flag);

	return checkbox;
}

function createDivider(frame) {
	var divider = NSView.alloc().initWithFrame(frame);

	divider.setWantsLayer(1);
	divider.layer().setBackgroundColor(CGColorCreateGenericRGB(204/255,204/255,204/255,1.0));

	return divider;
}

function createLabel(text,size,frame) {
	var label = NSTextField.alloc().initWithFrame(frame);

	label.setStringValue(text);
	label.setFont(NSFont.systemFontOfSize(size));
	label.setBezeled(false);
	label.setDrawsBackground(false);
	label.setEditable(false);
	label.setSelectable(false);

	return label;
}

function createLibrarySelect(alertWindow) {
	var librarySelect = createSelect(libraryNames,0,NSMakeRect(0,0,300,27));

	librarySelect.removeItemAtIndex(0);
	librarySelect.insertItemWithObjectValue_atIndex("Swap to…",0);
	librarySelect.selectItemAtIndex(0);

	var delegate = new MochaJSDelegate({
		"comboBoxSelectionDidChange:" : (function() {
			if (librarySelect.indexOfSelectedItem() != 0) {
				alertWindow.buttons().objectAtIndex(0).setEnabled(1);
			} else {
				var nothingSelected = true;

				for (i = 0; i < librarySelects.length; i++) {
					if (librarySelects[i].indexOfSelectedItem() != 0) {
						nothingSelected = false;
					}
				}

				if (nothingSelected) {
					alertWindow.buttons().objectAtIndex(0).setEnabled(0);
				}
			}
		})
	});

	librarySelect.setDelegate(delegate.getClassInstance());

	return librarySelect;
}

function createRadioButtons(options,selected,format,x,y) {
	var rows = options.length,
		columns = 1,
		buttonMatrixWidth = 300,
		buttonCellWidth = buttonMatrixWidth,
		x = (x) ? x : 0,
		y = (y) ? y : 0;

	if (format && format != 0) {
		rows = options.length / 2;
		columns = 2;
		buttonMatrixWidth = 300;
		buttonCellWidth = buttonMatrixWidth / columns;
	}

	var buttonCell = NSButtonCell.alloc().init();

	buttonCell.setButtonType(NSRadioButton);

	var buttonMatrix = NSMatrix.alloc().initWithFrame_mode_prototype_numberOfRows_numberOfColumns(
		NSMakeRect(x,y,buttonMatrixWidth,rows*20),
		NSRadioModeMatrix,
		buttonCell,
		rows,
		columns
	);

	buttonMatrix.setCellSize(NSMakeSize(buttonCellWidth,20));

	for (i = 0; i < options.length; i++) {
		buttonMatrix.cells().objectAtIndex(i).setTitle(options[i]);
		buttonMatrix.cells().objectAtIndex(i).setTag(i);
	}

	buttonMatrix.selectCellAtRow_column(selected,0);

	return buttonMatrix;
}

function createSelect(items,selectedItemIndex,frame) {
	var comboBox = NSComboBox.alloc().initWithFrame(frame),
		selectedItemIndex = (selectedItemIndex > -1) ? selectedItemIndex : 0;

	comboBox.addItemsWithObjectValues(items);
	comboBox.selectItemAtIndex(selectedItemIndex);
	comboBox.setNumberOfVisibleItems(16);
	comboBox.setCompletes(1);

	return comboBox;
}

function displayDialog(message,title) {
	NSApplication.sharedApplication().displayDialog_withTitle(message,title);
}

function googleAnalytics(context,category,action,label,value) {
	var trackingID = "UA-118995931-1",
		uuidKey = "google.analytics.uuid",
		uuid = NSUserDefaults.standardUserDefaults().objectForKey(uuidKey);

	if (!uuid) {
		uuid = NSUUID.UUID().UUIDString();
		NSUserDefaults.standardUserDefaults().setObject_forKey(uuid,uuidKey);
	}

	var url = "https://www.google-analytics.com/collect?v=1";
	// Tracking ID
	url += "&tid=" + trackingID;
	// Source
	url += "&ds=sketch" + MSApplicationMetadata.metadata().appVersion;
	// Client ID
	url += "&cid=" + uuid;
	// pageview, screenview, event, transaction, item, social, exception, timing
	url += "&t=event";
	// App Name
	url += "&an=" + encodeURI(context.plugin.name());
	// App ID
	url += "&aid=" + context.plugin.identifier();
	// App Version
	url += "&av=" + context.plugin.version();
	// Event category
	url += "&ec=" + encodeURI(category);
	// Event action
	url += "&ea=" + encodeURI(action);
	// Event label
	if (label) {
		url += "&el=" + encodeURI(label);
	}
	// Event value
	if (value) {
		url += "&ev=" + encodeURI(value);
	}

	var session = NSURLSession.sharedSession(),
		task = session.dataTaskWithURL(NSURL.URLWithString(NSString.stringWithString(url)));

	task.resume();
}

function getCachedSettings(context,location,settings) {
	try {
		for (i in settings) {
			var value = context.command.valueForKey_onLayer_forPluginIdentifier(i,location,pluginIdentifier);
			if (value) settings[i] = value;
		}

		return settings;
	} catch(err) {
		log(strProblemFetchingSettings);
	}
}

function getInstances(context) {
	var instanceArray = NSArray.array(),
		predicate = NSPredicate.predicateWithFormat("className == %@","MSSymbolInstance"),
		pageLoop = context.document.pages().objectEnumerator(),
		page;

	while (page = pageLoop.nextObject()) {
		var pageInstances = page.children().filteredArrayUsingPredicate(predicate);

		instanceArray = instanceArray.arrayByAddingObjectsFromArray(pageInstances);
	}

	return instanceArray;
}

function getLibrary(context) {
	var lastLibrary = context.command.valueForKey_onLayer("lastLibrary",context.document.documentData()),
		library = 0,
		selectLibrary = 0,
		selectSymbol = 0;

	if (lastLibrary && lastLibrary != 0) {
		var predicate = NSPredicate.predicateWithFormat("name == %@",lastLibrary),
			libraryMatch = libraries.filteredArrayUsingPredicate(predicate).firstObject();

		if (libraryMatch) {
			library = libraryMatch;
			selectLibrary = libraryNames.indexOf(lastLibrary.trim());
		}
	}

	librarySymbols = getLibrarySymbols(context,library);
	symbolArray = (librarySymbols && librarySymbols.length) ? librarySymbols.valueForKey("name") : NSMutableArray.arrayWithArray(["No Symbols"]);

	var defaultSettings = {};
	defaultSettings.includeSiblings = 1;
	defaultSettings.renameInstances = 1;
	defaultSettings.deleteMasters = 1;

	defaultSettings = getCachedSettings(context,context.document.documentData(),defaultSettings);

	var alertWindow = newAlertWindow(context,"Symbol Swap Selections","Swap the selected symbols and/or symbol instances to another master.");

	alertWindow.addTextLabelWithValue("Select a new symbol source...");

	var symbolSource = createSelect(libraryNames,selectLibrary,NSMakeRect(0,0,300,28));
	alertWindow.addAccessoryView(symbolSource);

	var newLibrarySelectDelegate = new MochaJSDelegate({
		"comboBoxSelectionDidChange:" : (function() {
			var selectedLibrary = (symbolSource.indexOfSelectedItem() == 0) ? 0 : libraries[symbolSource.indexOfSelectedItem() - 1];

			librarySymbols = getLibrarySymbols(context,selectedLibrary);

			if (librarySymbols && librarySymbols.length) {
				symbolArray = librarySymbols.valueForKey("name");
				swapButton.setEnabled(1);
			} else {
				symbolArray = NSMutableArray.arrayWithArray(["No Symbols"]);
				swapButton.setEnabled(0);
			}

			symbolMaster.removeAllItems();
			symbolMaster.addItemsWithObjectValues(symbolArray);

			if (context.selection.length == 1) {
				var symbolName = (context.selection[0].class() == "MSSymbolMaster") ? context.selection[0].name() : context.selection[0].symbolMaster().name();

				if (symbolArray.containsObject(symbolName)) {
					symbolMaster.selectItemAtIndex(symbolArray.indexOfObject(symbolName));
				} else {
					symbolMaster.selectItemAtIndex(0);
				}
			}
		})
	});

	symbolSource.setDelegate(newLibrarySelectDelegate.getClassInstance());

	var swapType = createRadioButtons(["Swap with symbol master of same name","Swap with symbol master of same ID","Let me choose..."],0);
	alertWindow.addAccessoryView(swapType);

	swapType.cells().objectAtIndex(0).setAction("callAction:");
	swapType.cells().objectAtIndex(0).setCOSJSTargetFunction(function(sender) {
		if (context.selection.length == 1) {
			var symbolName = (context.selection[0].class() == "MSSymbolMaster") ? context.selection[0].name() : context.selection[0].symbolMaster().name();

			if (symbolArray.containsObject(symbolName)) {
				selectSymbol = symbolArray.indexOfObject(symbolName);
			}

			symbolMaster.selectItemAtIndex(selectSymbol);
		}

		symbolMaster.setEnabled(0);
	});

	swapType.cells().objectAtIndex(1).setAction("callAction:");
	swapType.cells().objectAtIndex(1).setCOSJSTargetFunction(function(sender) {
		if (context.selection.length == 1) {
			var symbolID = (context.selection[0].class() == "MSSymbolMaster") ? context.selection[0].symbolID() : context.selection[0].symbolMaster().symbolID();

			if (symbolArray.containsObject(symbolID)) {
				selectSymbol = symbolArray.indexOfObject(symbolID);
			}

			symbolMaster.selectItemAtIndex(selectSymbol);
		}

		symbolMaster.setEnabled(0);
	});

	swapType.cells().objectAtIndex(2).setAction("callAction:");
	swapType.cells().objectAtIndex(2).setCOSJSTargetFunction(function(sender) {
		symbolMaster.setEnabled(1);
	});

	if (context.selection.length == 1) {
		var symbolName = (context.selection[0].class() == "MSSymbolMaster") ? context.selection[0].name() : context.selection[0].symbolMaster().name();

		if (symbolArray.containsObject(symbolName)) {
			selectSymbol = symbolArray.indexOfObject(symbolName);
		}
	}

	var symbolMaster = createSelect(symbolArray,selectSymbol,NSMakeRect(0,0,300,28));
	alertWindow.addAccessoryView(symbolMaster);
	symbolMaster.setEnabled(0);

	var includeSiblings = createCheckbox({name:"Swap siblings & overrides of selected instances",value:1},defaultSettings.includeSiblings,NSMakeRect(0,0,300,16));
	alertWindow.addAccessoryView(includeSiblings);

	var renameInstances = createCheckbox({name:"Rename instances to new master name",value:1},defaultSettings.renameInstances,NSMakeRect(0,0,300,16));
	alertWindow.addAccessoryView(renameInstances);

	var deleteMasters = createCheckbox({name:"Remove selected masters after swap",value:1},defaultSettings.deleteMasters,NSMakeRect(0,0,300,16));
	alertWindow.addAccessoryView(deleteMasters);

	var swapButton = alertWindow.addButtonWithTitle("Swap");

	if (librarySymbols && librarySymbols.length) {
		swapButton.setEnabled(1);
	} else {
		swapButton.setEnabled(0);
	}

	alertWindow.addButtonWithTitle("Cancel");

	var responseCode = alertWindow.runModal();

	if (responseCode == 1000) {
		var valueForLibrary = (symbolSource.indexOfSelectedItem() == 0) ? 0 : libraryNames[symbolSource.indexOfSelectedItem()];

		context.command.setValue_forKey_onLayer(valueForLibrary,"lastLibrary",context.document.documentData());
		context.command.setValue_forKey_onLayer(includeSiblings.state(),"includeSiblings",context.document.documentData());
		context.command.setValue_forKey_onLayer(renameInstances.state(),"renameInstances",context.document.documentData());
		context.command.setValue_forKey_onLayer(deleteMasters.state(),"deleteMasters",context.document.documentData());

		if (!debugMode) googleAnalytics(context,"swap","symbol");

		return {
			selectedLibrary : symbolSource.indexOfSelectedItem(),
			selectedMaster : (swapType.selectedCell().tag() == 2) ? librarySymbols[symbolMaster.indexOfSelectedItem()] : null,
			includeSiblings : includeSiblings.state(),
			renameInstances : renameInstances.state(),
			deleteMasters : deleteMasters.state()
		}
	} else return false;
}

function getLibrarySymbols(context,library) {
	var librarySymbolSort = NSSortDescriptor.sortDescriptorWithKey_ascending("name",1),
		librarySymbols;

	if (library == 0) {
		librarySymbols = context.document.documentData().localSymbols();
	} else {
		var libraryPath = library.locationOnDisk().path(),
			libraryFile = openFile(libraryPath);

		librarySymbols = (libraryFile) ? libraryFile.documentData().allSymbols() : nil;

		libraryFile.close();
	}

	return librarySymbols.sortedArrayUsingDescriptors([librarySymbolSort]);
}

function importForeignSymbol(symbol,library) {
	var intoDocument = MSDocument.currentDocument().documentData(),
		libraryController = AppController.sharedInstance().librariesController(),
		foreignSymbol;

	if (MSApplicationMetadata.metadata().appVersion >= 50) {
		var objectReference = MSShareableObjectReference.referenceForShareableObject_inLibrary(symbol,library);

		foreignSymbol = libraryController.importShareableObjectReference_intoDocument(objectReference,intoDocument);
	} else {
		foreignSymbol = libraryController.importForeignSymbol_fromLibrary_intoDocument_(symbol,library,intoDocument);
	}

	return foreignSymbol;
}

function newAlertWindow(context,name,text) {
	var alertWindow = COSAlertWindow.new();

	var iconPath = context.plugin.urlForResourceNamed("icon.png").path(),
		icon = NSImage.alloc().initByReferencingFile(iconPath);

	alertWindow.setIcon(icon);
	alertWindow.setMessageText(name);
	alertWindow.setInformativeText(text);

	return alertWindow;
}

function openFile(path) {
	var file = MSDocument.new();

	return (file.readFromURL_ofType_error(path,'com.bohemiancoding.sketch.drawing',nil)) ? file : nil;
}

function openUrl(url) {
	NSWorkspace.sharedWorkspace().openURL(NSURL.URLWithString(url));
}
